/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
 * first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
 * even-valued terms.
 */

void main() {
    System.out.println(naiveFibonacciSum(4_000_000));
}

int naiveFibonacciSum(int upto) {
    if(upto < 1) {
        throw new IllegalArgumentException("Fibonacci numbers start with value 1");
    }

    if(upto < 2) {
        return 0;
    }

    int sum = 0;
    int prev = 1;  // 'prev' and 'curr' represent the two terms used to calculate the next Fibonacci number, we will iterate over
                   // curr's value and also check for it being even
    for(int curr = 2; curr <= upto;) {
        if(curr % 2 == 0) {
            sum += curr;
        }
        int tmp = curr;
        curr += prev;
        prev = tmp;
    }

    return sum;
}